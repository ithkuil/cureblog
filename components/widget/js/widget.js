// Generated by CoffeeScript 1.4.0
(function() {
  var Widget, WidgetTool,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Widget = (function() {

    function Widget(opts) {
      var exists, parent, position, widget;
      console.log('constructor for widget. opts is');
      console.log(opts);
      this.name = opts.name, parent = opts.parent, position = opts.position, exists = opts.exists, widget = opts.widget;
      if (!exists) {
        console.log('not exists');
        this.html = $("#" + this.name + "template").html();
        console.log('---- @name is ' + this.name);
        console.log('----- widget template html is ');
        console.log(this.html);
        this.jqobj = $(this.html);
        this.jqobj.css('position', 'absolute');
        this.jqobj.css('top', position.top + 'px');
        this.jqobj.css('left', position.left + 'px');
        parent.append(this.jqobj);
      } else {
        console.log('exists');
        this.jqobj = widget;
      }
      try {
        if (window.loggedIn) {
          this.jqobj.draggable();
        }
      } catch (e) {
        console.log(e);
      }
    }

    return Widget;

  })();

  WidgetTool = (function() {

    function WidgetTool(name) {
      var btn, data,
        _this = this;
      this.name = name;
      this.createWidget = __bind(this.createWidget, this);

      this.html = $("#" + this.name + "tooltemplate").html();
      console.log('WidgetTool name is ' + this.name);
      console.log('html is ' + this.html);
      this.jqobj = $(this.html);
      btn = this.jqobj.find('.designwidget');
      btn.data('name', this.name);
      data = {
        name: name
      };
      btn.data('widget', data);
      $('#objlist').append(this.jqobj);
      this.jqobj.draggable({
        helper: 'clone',
        stop: function(ev, ui) {
          var p;
          p = {};
          if (ev.offsetX != null) {
            p.left = ev.offsetX;
            p.top = ev.offsetY;
          } else {
            p.left = ev.pageX - $(ev.target).offsetLeft;
            p.top = ev.pageY - $(ev.target).offsetTop;
          }
          return _this.createWidget(p);
        }
      });
    }

    WidgetTool.prototype.createWidget = function(p) {
      var opts;
      opts = {
        name: this.name,
        parent: $('.activewidget'),
        position: p,
        exists: false
      };
      return new window["" + this.name + "Widget"](opts);
    };

    return WidgetTool;

  })();

  $(function() {
    console.log('widget startup');
    return $(document).bind('sessionState', function(user) {
      return $('.widgetsall').each(function() {
        var name, opts, text, x, y;
        console.log('found a widget');
        if ($(this) != null) {
          name = $(this).data('name');
          x = $(this).position().left;
          y = $(this).position().top;
          opts = {
            name: name,
            parent: $(this).parent(),
            position: $(this).position(),
            exists: true,
            widget: $(this)
          };
          return text = new window["" + name + "Widget"](opts);
        } else {
          return console.log('widget startup #{name} failed');
        }
      });
    });
  });

  window.Widget = Widget;

  window.WidgetTool = WidgetTool;

}).call(this);
